{"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.datasets import load_iris"],"metadata":{"id":"HhWS2yWfu287","executionInfo":{"status":"ok","timestamp":1753347057950,"user_tz":-330,"elapsed":2133,"user":{"displayName":"Rawhan Ramzi Mohammed","userId":"15179450938452370829"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["iris = pd.DataFrame(load_iris().data, columns=load_iris().feature_names)\n","iris.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"-wLUl9EZxm_V","executionInfo":{"status":"ok","timestamp":1753347060348,"user_tz":-330,"elapsed":115,"user":{"displayName":"Rawhan Ramzi Mohammed","userId":"15179450938452370829"}},"outputId":"e6c0da12-e778-4af3-ec6f-c16539346a27"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)\n","0                5.1               3.5                1.4               0.2\n","1                4.9               3.0                1.4               0.2\n","2                4.7               3.2                1.3               0.2\n","3                4.6               3.1                1.5               0.2\n","4                5.0               3.6                1.4               0.2"],"text/html":["\n","  <div id=\"df-7e82dace-2abd-4954-8dd4-8ee4a376082c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e82dace-2abd-4954-8dd4-8ee4a376082c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7e82dace-2abd-4954-8dd4-8ee4a376082c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7e82dace-2abd-4954-8dd4-8ee4a376082c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-5f132195-9af0-4eeb-82e2-9b4ae897ddea\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5f132195-9af0-4eeb-82e2-9b4ae897ddea')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-5f132195-9af0-4eeb-82e2-9b4ae897ddea button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"iris","summary":"{\n  \"name\": \"iris\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"sepal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8280661279778629,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.435866284936698,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7652982332594667,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7622376689603465,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["iris.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r4w7HVjqx5HZ","executionInfo":{"status":"ok","timestamp":1753347069538,"user_tz":-330,"elapsed":8,"user":{"displayName":"Rawhan Ramzi Mohammed","userId":"15179450938452370829"}},"outputId":"6549c731-1f8a-4d7f-8ae8-1bffa600cbb6"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)',\n","       'petal width (cm)'],\n","      dtype='object')"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["iris.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":209},"id":"QSQpmcpNx7hV","executionInfo":{"status":"ok","timestamp":1753347071354,"user_tz":-330,"elapsed":11,"user":{"displayName":"Rawhan Ramzi Mohammed","userId":"15179450938452370829"}},"outputId":"be592b5e-8246-426c-d3fd-da3b901eb9d0"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["sepal length (cm)    float64\n","sepal width (cm)     float64\n","petal length (cm)    float64\n","petal width (cm)     float64\n","dtype: object"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>sepal length (cm)</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>sepal width (cm)</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>petal length (cm)</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>petal width (cm)</th>\n","      <td>float64</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> object</label>"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["iris.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":209},"id":"PMYyuK_Gx9Bs","executionInfo":{"status":"ok","timestamp":1753347073364,"user_tz":-330,"elapsed":36,"user":{"displayName":"Rawhan Ramzi Mohammed","userId":"15179450938452370829"}},"outputId":"26ecdc0c-92ef-40d3-b80f-9420813ef451"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["sepal length (cm)    0\n","sepal width (cm)     0\n","petal length (cm)    0\n","petal width (cm)     0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>sepal length (cm)</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sepal width (cm)</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>petal length (cm)</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>petal width (cm)</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["iris.iloc[0,0] = None\n","iris.iloc[0,3] = None\n","iris.iloc[1,0] = None\n","iris.iloc[1,3] = None\n","iris.iloc[3,1] = None\n","print(iris.isnull().sum())\n","print('Total : ' + str(iris.isnull().sum().sum()))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q16LnXA8yBXP","executionInfo":{"status":"ok","timestamp":1753332949006,"user_tz":-330,"elapsed":52,"user":{"displayName":"","userId":""}},"outputId":"2f666b1e-9782-4574-993e-024721669345"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["sepal length (cm)    2\n","sepal width (cm)     1\n","petal length (cm)    0\n","petal width (cm)     2\n","dtype: int64\n","Total : 5\n"]}]},{"cell_type":"code","source":["iris.fillna(iris.mean(), inplace=True)\n","print(iris.isnull().sum())\n","print('Total : ' + str(iris.isnull().sum().sum()))\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gd9JT4zKyZ2M","executionInfo":{"status":"ok","timestamp":1753347078650,"user_tz":-330,"elapsed":23,"user":{"displayName":"Rawhan Ramzi Mohammed","userId":"15179450938452370829"}},"outputId":"2e04f27b-36e2-4fc0-b87d-6ae1a15e216c"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["sepal length (cm)    0\n","sepal width (cm)     0\n","petal length (cm)    0\n","petal width (cm)     0\n","dtype: int64\n","Total : 0\n"]}]},{"cell_type":"code","source":["print(iris.iloc[0,0],\n","iris.iloc[0,3],\n","iris.iloc[1,0],\n","iris.iloc[1,3],\n","iris.iloc[3,1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"039HTLxto_SR","executionInfo":{"status":"ok","timestamp":1753347307946,"user_tz":-330,"elapsed":39,"user":{"displayName":"Rawhan Ramzi Mohammed","userId":"15179450938452370829"}},"outputId":"6f6dcaed-eb54-4406-c105-6b5aedd25085"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["5.1 0.2 4.9 0.2 3.1\n"]}]},{"cell_type":"code","source":["iris.hist(figsize=(10,8),bins=20)\n","plt.suptitle(\"Histogram\")\n","plt.tight_layout()\n","plt.show()"],"metadata":{"id":"YkXK0OIm_Umg","executionInfo":{"status":"ok","timestamp":1753347087079,"user_tz":-330,"elapsed":1237,"user":{"displayName":"Rawhan Ramzi Mohammed","userId":"15179450938452370829"}},"outputId":"f6bf3c56-6b8f-4124-ec47-2e71e61af336","colab":{"base_uri":"https://localhost:8080/","height":806}},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 4 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["iris.describe()"],"metadata":{"id":"0_ZPdpy__pCp","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1753347108170,"user_tz":-330,"elapsed":78,"user":{"displayName":"Rawhan Ramzi Mohammed","userId":"15179450938452370829"}},"outputId":"c2c3bf79-e485-483b-9a98-6d0e7aee8361"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       sepal length (cm)  sepal width (cm)  petal length (cm)  \\\n","count         150.000000        150.000000         150.000000   \n","mean            5.843333          3.057333           3.758000   \n","std             0.828066          0.435866           1.765298   \n","min             4.300000          2.000000           1.000000   \n","25%             5.100000          2.800000           1.600000   \n","50%             5.800000          3.000000           4.350000   \n","75%             6.400000          3.300000           5.100000   \n","max             7.900000          4.400000           6.900000   \n","\n","       petal width (cm)  \n","count        150.000000  \n","mean           1.199333  \n","std            0.762238  \n","min            0.100000  \n","25%            0.300000  \n","50%            1.300000  \n","75%            1.800000  \n","max            2.500000  "],"text/html":["\n","  <div id=\"df-a5d06824-f8d0-49e5-8c1a-d089cebf827d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>5.843333</td>\n","      <td>3.057333</td>\n","      <td>3.758000</td>\n","      <td>1.199333</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.828066</td>\n","      <td>0.435866</td>\n","      <td>1.765298</td>\n","      <td>0.762238</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>4.300000</td>\n","      <td>2.000000</td>\n","      <td>1.000000</td>\n","      <td>0.100000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>5.100000</td>\n","      <td>2.800000</td>\n","      <td>1.600000</td>\n","      <td>0.300000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>5.800000</td>\n","      <td>3.000000</td>\n","      <td>4.350000</td>\n","      <td>1.300000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>6.400000</td>\n","      <td>3.300000</td>\n","      <td>5.100000</td>\n","      <td>1.800000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>7.900000</td>\n","      <td>4.400000</td>\n","      <td>6.900000</td>\n","      <td>2.500000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a5d06824-f8d0-49e5-8c1a-d089cebf827d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a5d06824-f8d0-49e5-8c1a-d089cebf827d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a5d06824-f8d0-49e5-8c1a-d089cebf827d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-2a1d25e6-8618-425f-a44a-52867e564206\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2a1d25e6-8618-425f-a44a-52867e564206')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-2a1d25e6-8618-425f-a44a-52867e564206 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"iris\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"sepal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.24711349471842,\n        \"min\": 0.8280661279778629,\n        \"max\": 150.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.843333333333334,\n          5.8,\n          150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52.08617800869866,\n        \"min\": 0.435866284936698,\n        \"max\": 150.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.0573333333333337,\n          3.0,\n          150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.83521261418364,\n        \"min\": 1.0,\n        \"max\": 150.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.7580000000000005,\n          4.35,\n          150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52.636648242617504,\n        \"min\": 0.1,\n        \"max\": 150.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.1993333333333336,\n          1.3,\n          150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["iris[['sepal width (cm)','sepal length (cm)', 'petal width (cm)','petal length (cm)']].mean()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":209},"id":"2aPKwM1FpvOX","executionInfo":{"status":"ok","timestamp":1753347796453,"user_tz":-330,"elapsed":7,"user":{"displayName":"Rawhan Ramzi Mohammed","userId":"15179450938452370829"}},"outputId":"32134430-05e4-4e37-d2e5-a80af40c92b1"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["sepal width (cm)     3.057333\n","sepal length (cm)    5.843333\n","petal width (cm)     1.199333\n","petal length (cm)    3.758000\n","dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>sepal width (cm)</th>\n","      <td>3.057333</td>\n","    </tr>\n","    <tr>\n","      <th>sepal length (cm)</th>\n","      <td>5.843333</td>\n","    </tr>\n","    <tr>\n","      <th>petal width (cm)</th>\n","      <td>1.199333</td>\n","    </tr>\n","    <tr>\n","      <th>petal length (cm)</th>\n","      <td>3.758000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["iris[['sepal width (cm)','sepal length (cm)', 'petal width (cm)','petal length (cm)']].median()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":209},"id":"SfbY2Ft0pxoJ","executionInfo":{"status":"ok","timestamp":1753347819566,"user_tz":-330,"elapsed":25,"user":{"displayName":"Rawhan Ramzi Mohammed","userId":"15179450938452370829"}},"outputId":"1a9299b2-1126-48e4-d736-9643953fac67"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["sepal width (cm)     3.00\n","sepal length (cm)    5.80\n","petal width (cm)     1.30\n","petal length (cm)    4.35\n","dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>sepal width (cm)</th>\n","      <td>3.00</td>\n","    </tr>\n","    <tr>\n","      <th>sepal length (cm)</th>\n","      <td>5.80</td>\n","    </tr>\n","    <tr>\n","      <th>petal width (cm)</th>\n","      <td>1.30</td>\n","    </tr>\n","    <tr>\n","      <th>petal length (cm)</th>\n","      <td>4.35</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["iris[['sepal width (cm)','sepal length (cm)', 'petal width (cm)','petal length (cm)']].count()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":209},"id":"ydInAeR8qdZS","executionInfo":{"status":"ok","timestamp":1753347829304,"user_tz":-330,"elapsed":33,"user":{"displayName":"Rawhan Ramzi Mohammed","userId":"15179450938452370829"}},"outputId":"0b4f45a1-0692-4c4b-a575-7b612f96a16d"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["sepal width (cm)     150\n","sepal length (cm)    150\n","petal width (cm)     150\n","petal length (cm)    150\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>sepal width (cm)</th>\n","      <td>150</td>\n","    </tr>\n","    <tr>\n","      <th>sepal length (cm)</th>\n","      <td>150</td>\n","    </tr>\n","    <tr>\n","      <th>petal width (cm)</th>\n","      <td>150</td>\n","    </tr>\n","    <tr>\n","      <th>petal length (cm)</th>\n","      <td>150</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":[],"metadata":{"id":"prU06E43rKy5"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"toc_visible":true,"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1753337167633}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}